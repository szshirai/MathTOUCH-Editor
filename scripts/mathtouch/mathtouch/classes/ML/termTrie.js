/*package MathTouch;after MathTOUCH.middleEX,EXtree.js*/MathTOUCH.termNode = function(r,pare,it,ot,tt,rt){    this.rank=r;    this.score=0;	this.inTerm=it;    this.outTerm=ot;    this.Termtype=tt;    this.symComplete=false;    this.divPoint=false;	this.down=null;	this.right=rt;    this.parent=pare;};MathTOUCH.termNode.prototype.copy=function(org) {    this.rank=org.rank;    this.inTerm = org.inTerm;    this.outTerm= org.outTerm;    this.Termtype=org.Termtype;    this.symComplete=org.symComplete;    this.divPoint=org.divPoint;    this.down = org.down;    this.right = org.right;    this.parent=org.parent;    this.score=org.score;}MathTOUCH.termNode.prototype.settermNode=function(r,pare,org) {    this.rank=r;    this.parent=pare;    this.score=org.score;    this.inTerm = org.inTerm;    this.outTerm= org.outTerm;    this.Termtype=org.Termtype;    this.symComplete=org.symComplete;    this.divPoint=org.divPoint;    if(org.down!=null){        this.down = new MathTOUCH.termNode(r+1,this,"","",0,null);        this.down.settermNode(r+1,this,org.down);    }    else this.down=null;    if(org.right!=null){        this.right = new MathTOUCH.termNode(r,pare,"","",0,null);        this.right.settermNode(r,pare,org.right);    }    else this.right=null;}MathTOUCH.termNode.prototype.addDown=function(child){ //termNode child){    this.down=child;}MathTOUCH.termNode.prototype.addRight=function(rt){ //termNode rt){    this.right=rt;}MathTOUCH.termNode.prototype.addNextMiddle=function(midlist){ //midlistに当該ノードを加えたmiddleListを生成して返す    if(this.rank==0) return midlist;    var tn=this;    var MAX=96;    var sum=this.rank;    var mx=new MathTOUCH.middleEX(this.rank);    mx.toknum=this.rank;    while(tn!=null&&tn.rank>0){        mx.inTerm[tn.rank-1]=tn.inTerm;        mx.outTerm[tn.rank-1]=tn.outTerm;        mx.Termtype[tn.rank-1]=tn.Termtype;        if((tn.Termtype>3&&tn.Termtype<10)||tn.Termtype==11){            mx.outKey[tn.rank-1]=OTB.theNumberOf(tn.outTerm);            mx.outOrder[tn.rank-1]=OTB.getFirstOrder(mx.outKey[tn.rank-1],tn.Termtype);        }        mx.symComplete[tn.rank-1]=tn.symComplete;        mx.divPoint[tn.rank-1]=tn.divPoint;        sum=sum+tn.score;        tn=tn.parent;    }    if(mx.Termtype[0]==MathTOUCH.OP1A||mx.Termtype[0]==MathTOUCH.OP2C||mx.Termtype[0]==MathTOUCH.OP3T){sum=sum+5;}    if(this.rank>=3&&(mx.Termtype[this.rank-3]==MathTOUCH.OP3P)){sum=sum+5;}    if(this.rank>=2&&(mx.Termtype[this.rank-2]==MathTOUCH.OP3P||mx.Termtype[this.rank-2]==MathTOUCH.OP2P||mx.Termtype[this.rank-2]==MathTOUCH.OP3T)){sum=sum+5;}    if(this.rank>=1&&(mx.Termtype[this.rank-1]==MathTOUCH.OP3P||mx.Termtype[this.rank-1]==MathTOUCH.OP2P||mx.Termtype[this.rank-1]==MathTOUCH.OP3T||mx.Termtype[this.rank-1]==MathTOUCH.OP1P||mx.Termtype[this.rank-1]==MathTOUCH.OP2C)){sum=sum+5;}    mx.rank=sum;    var mmxx;    var len=midlist.length;    var i;    for(i=0;i<len;i++){        mmxx=midlist[i];if(mmxx==null) alert("mmxx error i="+i+"<"+len);        if(sum<mmxx.rank){break;}    }    var ans;    if(len<MAX){        ans=new Array(len+1);        for(var j=0;j<i;j++) ans[j]=midlist[j];        ans[i]=mx;        for(var j=i+1;j<=len;j++) ans[j]=midlist[j-1];    }    else{        for(var j=len-1;j>i;j--) midlist[j]=midlist[j-1];        midlist[i]=mx;        ans=midlist;    }    return ans;}MathTOUCH.termTrie=function(mainstr){    this.BoldNumber=false;    this.treeNum=0;    this.root=null;    this.middleList=new Array();    if(this.root==null){        this.root=new MathTOUCH.termNode(0,null,"","",-2,null);    }    this.root.addDown(this.makeTermNode(1,this.root,mainstr));};MathTOUCH.termTrie.prototype.makeTermNode=function(r,pare,str){        var ans=null;        var snum=0;        var numnum=0;        var dichit=new Array();        for(numnum=0;numnum<str.length;numnum++){			if(this.getType(str.charCodeAt(numnum))!=MathTOUCH.NUM) break;		}        if(str.charAt(0)=='\"'){			var e=str.indexOf('\"',1);			if(e<0){                ans=new MathTOUCH.termNode(r,pare,str,str.substring(1),MathTOUCH.TXT,null);				snum=str.length();			}			else{                ans=new MathTOUCH.termNode(r,pare,str.substring(0,e+1),str.substring(1,e),MathTOUCH.TXT,null);				snum=e+1;			}            ans.symComplete=true;		}        else if(numnum>0){            ans=new MathTOUCH.termNode(r,pare,str.substring(0,numnum),str.substring(0,numnum),MathTOUCH.NUM,null);            if(this.BoldNumber==false){                if(numnum>1) ans.symComplete=false;                else ans.symComplete=true;            }            else ans.symComplete=false;            snum=numnum;            var tmp=ans;            for(var i=numnum-1;i>0;i--){                tmp.addRight(new MathTOUCH.termNode(r,pare,str.substring(0,i),str.substring(0,i),MathTOUCH.NUM,null));                if(this.BoldNumber==false){                    if(i>1) tmp.right.symComplete=false;                    else tmp.right.symComplete=true;                }                else tmp.right.symComplete=false;                if(i<str.length){                    tmp.right.addDown(this.makeTermNode(r+1,tmp.right,str.substring(i)));                }                tmp=tmp.right;            }        }        else if((dichit=DIC.AlldicMatch(str))!=null){            var key;            var tmp;            if(dichit[0].type==MathTOUCH.VAR||dichit[0].type==MathTOUCH.SYM){                key=KTB.keyNumberFromInput(dichit[0].theWord);                ans=new MathTOUCH.termNode(r,pare,dichit[0].keyword,KTB.getWord(key,0),dichit[0].type,null);                ans.symComplete=false;                snum=dichit[0].getInputWord().length;                tmp=ans;                for(var i=1;i<KTB.keyLengthOf(key);i++){                    tmp.addRight(new MathTOUCH.termNode(r,pare,dichit[0].keyword,KTB.getWord(key,i),dichit[0].type,null));                    tmp.right.symComplete=false;                    var rnum=dichit[0].keyword.length;                    if(rnum<str.length){                        tmp.right.addDown(this.makeTermNode(r+1,tmp.right,str.substring(rnum)));                    }                    tmp=tmp.right;                }            }            else{                ans=new MathTOUCH.termNode(r,pare,dichit[0].keyword,dichit[0].theWord,dichit[0].type,null);                ans.symComplete=false;                snum=dichit[0].getInputWord().length;                tmp=ans;                for(var i=1;i<dichit.length;i++){                    tmp.addRight(new MathTOUCH.termNode(r,pare,dichit[i].keyword,dichit[i].theWord,dichit[i].type,null));                    tmp.right.symComplete=false;                    var rnum=dichit[i].keyword.length;                    if(rnum<str.length){                        tmp.right.addDown(this.makeTermNode(r+1,tmp.right,str.substring(rnum)));                    }                    tmp=tmp.right;                }            }            tmp.addRight(this.makeLetterNode(r,pare,str));            tmp.right.addDown(this.makeTermNode(r+1,tmp.right,str.substring(1)));        }        else{            ans=this.makeLetterNode(r,pare,str);            snum=1;        }        if(snum<str.length) ans.addDown(this.makeTermNode(r+1,ans,str.substring(snum)));        return ans;}MathTOUCH.termTrie.prototype.makeLetterNode=function(r,pare,str){        var ans=null;        var c=str.charAt(0);		if(c=='\u21E9'){            ans=new MathTOUCH.termNode(r,pare,""+c,"matBegin",MathTOUCH.MAT,null);			ans.symComplete=true;		}        else if(c=='\u22A1'){            ans=new MathTOUCH.termNode(r,pare,""+c,"matEnd",MathTOUCH.MAT,null);			ans.symComplete=true;		}        else if(c=='\u23CE' || c=='\u27B1'){            ans=new MathTOUCH.termNode(r,pare,""+c,""+c,MathTOUCH.MAT,null);			ans.symComplete=true;		}		else if(c=='\u201A'){            ans=new MathTOUCH.termNode(r,pare,"\u201A",",",MathTOUCH.OP2C,null);			ans.symComplete=false;		}        else{            if(c=='¥') c='\\';            var type=this.getType(c.charCodeAt(0));            var on=this.OPEnumber(c.charCodeAt(0));            if(type>=3&&on>=0){ type=MathTOUCH.OPEtype[on];}            ans=new MathTOUCH.termNode(r,pare,""+c,KTB.getLogTopWord(c.charCodeAt(0)-' '.charCodeAt(0)),type,null);            if(type==2){                if(KTB.keyLengthOf(c.charCodeAt(0)-' '.charCodeAt(0))==1) ans.symComplete=true;                else ans.symComplete=false;            }            else if(type==1) ans.symComplete=true;        }        return ans;}MathTOUCH.termTrie.prototype.getType=function(cc){		if(cc>='0'.charCodeAt(0)&&cc<='9'.charCodeAt(0)) return(1);		else if(cc>='A'.charCodeAt(0)&&cc<='Z'.charCodeAt(0)) return(2);		else if(cc>='a'.charCodeAt(0)&&cc<='z'.charCodeAt(0)) return(2);		else if(cc==' '.charCodeAt(0)) return(2);		else if(cc>' '.charCodeAt(0)&&cc<='~'.charCodeAt(0)) return(3);		else return(0);}MathTOUCH.termTrie.prototype.OPEnumber=function(cc){		if(cc<' '.charCodeAt(0)){return -1;}		else if(cc<'0'.charCodeAt(0)){return(cc-' '.charCodeAt(0));}		else if(cc<':'.charCodeAt(0)){return -1;}		else if(cc<'A'.charCodeAt(0)){return (16+cc-':'.charCodeAt(0));}		else if(cc<'['.charCodeAt(0)){return -1;}		else if(cc<'a'.charCodeAt(0)){return (23+cc-'['.charCodeAt(0));}		else if(cc<'{'.charCodeAt(0)){return -1;}		else if(cc<='~'.charCodeAt(0)){return (29+cc-'{'.charCodeAt(0));}		else{return -1;}}MathTOUCH.termTrie.prototype.addAnotherOpeTypeRoot=function(){        this.addAnotherOpeType(this.root);}MathTOUCH.termTrie.prototype.addAnotherOpeType=function(tn){        var ttt=tn.Termtype;        var opes=null;        var wd=tn.outTerm;        if(tn.down!=null) this.addAnotherOpeType(tn.down);        if(tn.right!=null) this.addAnotherOpeType(tn.right);        if(MathTOUCH.OP1P<=ttt&&ttt<=MathTOUCH.OP3T){            opes=OTB.getOpeList(wd);            if(opes!=null && opes.length>1){                tn.Termtype=opes[0];                for(var j=1;j<opes.length;j++){                    var next=new MathTOUCH.termNode(tn.rank,tn.parent,"","",0,null);                    next.settermNode(tn.rank,tn.parent,tn);                    next.Termtype=opes[j];                    next.score=j;                    tn.right=next;                }            }        }}MathTOUCH.termTrie.prototype.divpointTrace=function(tn){        if(tn.down==null){            return;        }        var tt1=tn.Termtype;        var wd1=tn.outTerm;        var tn2=tn.down;        var tt2;        var wd2;        while(tn2!=null){            tt2=tn2.Termtype;            wd2=tn2.outTerm;            if(((tt1<4)||(tt1==MathTOUCH.OP1A)||(tt1==MathTOUCH.OP1B&&(wd1==")"||wd1=="}"||wd1=="]")))&&((tt2!=MathTOUCH.OP1A)&&(tt2!=MathTOUCH.OP2C)&&(tt2!=MathTOUCH.OP3T)&&(wd2!=")")&&(wd2!="}")&&(wd2!="]")))            tn2.divPoint=true;            this.divpointTrace(tn2);            tn2=tn2.right;        }}MathTOUCH.termTrie.prototype.makeMiddleList=function(){        var temp=this.root;        while(temp.down!=null){            temp=temp.down;        }        this.treeNum++;        this.middleList=temp.addNextMiddle(this.middleList);        while(temp!=this.root){            if(temp.right!=null){                temp=temp.right;                while(temp.down!=null){                    temp=temp.down;                }                this.treeNum++;                this.middleList=temp.addNextMiddle(this.middleList);            }            else{                temp=temp.parent;            }        }}MathTOUCH.termTrie.prototype.printRoot=function(){        if(this.root==null) return null;        return this.printNode(this.root.down);}MathTOUCH.termTrie.prototype.printNode=function(tn){ //termNode tn){        if(tn==null) return null;        var typename=0;        if(tn.Termtype==-1) typename=MathTOUCH.tName[14];        else if(tn.Termtype==100) typename=MathTOUCH.tName[13];        else typename=MathTOUCH.tName[tn.Termtype];        if(tn.down==null) return tn.inTerm+typename;        var str=tn.inTerm+typename+","+this.printNode(tn.down)+":down\n";        var tmp=tn.down;        while(tmp.right!=null){            str=str+tn.inTerm+typename+","+this.printNode(tmp.right)+":right\n";            tmp=tmp.right;        }        return str;}